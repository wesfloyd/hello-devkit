// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: eigenlayer/hourglass/v1/wire/wire.proto

package wire

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AuthenticateSocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregatorAddress            string `protobuf:"bytes,1,opt,name=aggregator_address,json=aggregatorAddress,proto3" json:"aggregator_address,omitempty"`                                      // address of the aggregator that wants to connect
	OperatorSignedNonce          string `protobuf:"bytes,2,opt,name=operator_signed_nonce,json=operatorSignedNonce,proto3" json:"operator_signed_nonce,omitempty"`                              // the signed nonce the operator sent back in the handshake
	OperatorSignedNonceSignature string `protobuf:"bytes,3,opt,name=operator_signed_nonce_signature,json=operatorSignedNonceSignature,proto3" json:"operator_signed_nonce_signature,omitempty"` // signature of the operator_signed_nonce signed with aggregator key to verify
}

func (x *AuthenticateSocket) Reset() {
	*x = AuthenticateSocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateSocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateSocket) ProtoMessage() {}

func (x *AuthenticateSocket) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateSocket.ProtoReflect.Descriptor instead.
func (*AuthenticateSocket) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescGZIP(), []int{0}
}

func (x *AuthenticateSocket) GetAggregatorAddress() string {
	if x != nil {
		return x.AggregatorAddress
	}
	return ""
}

func (x *AuthenticateSocket) GetOperatorSignedNonce() string {
	if x != nil {
		return x.OperatorSignedNonce
	}
	return ""
}

func (x *AuthenticateSocket) GetOperatorSignedNonceSignature() string {
	if x != nil {
		return x.OperatorSignedNonceSignature
	}
	return ""
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId          string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                            // ID of the task from the origin inbox contract
	OperatorAddress string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"` // ID of the operator that needs to process the message (mainly for debugging)
	ChainId         uint64 `protobuf:"varint,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`                        // ID of the chain the message originated on
	Payload         []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`                                        // generic bytes to pass off to the AVS software to execute
	Deadline        uint64 `protobuf:"varint,5,opt,name=deadline,proto3" json:"deadline,omitempty"`                                     // unix timestamp of when the task needs to be processed by
	TaskSignature   string `protobuf:"bytes,6,opt,name=task_signature,json=taskSignature,proto3" json:"task_signature,omitempty"`       // signature of the payload, signed by aggregator
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescGZIP(), []int{1}
}

func (x *Task) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *Task) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *Task) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *Task) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Task) GetDeadline() uint64 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *Task) GetTaskSignature() string {
	if x != nil {
		return x.TaskSignature
	}
	return ""
}

type TaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId            string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`                                  // ID of the task processed
	OperatorAddress   string `protobuf:"bytes,2,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`       // address of the operator that created the result
	Response          []byte `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`                                            // the provided response
	ResponseSignature []byte `protobuf:"bytes,4,opt,name=response_signature,json=responseSignature,proto3" json:"response_signature,omitempty"` // signature of the response using the operator's key
	ChainId           uint64 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`                              // ID of the chain the message originated on
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescGZIP(), []int{2}
}

func (x *TaskResult) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskResult) GetOperatorAddress() string {
	if x != nil {
		return x.OperatorAddress
	}
	return ""
}

func (x *TaskResult) GetResponse() []byte {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *TaskResult) GetResponseSignature() []byte {
	if x != nil {
		return x.ResponseSignature
	}
	return nil
}

func (x *TaskResult) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type HeartbeatPing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatPing) Reset() {
	*x = HeartbeatPing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatPing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatPing) ProtoMessage() {}

func (x *HeartbeatPing) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatPing.ProtoReflect.Descriptor instead.
func (*HeartbeatPing) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescGZIP(), []int{3}
}

type HeartbeatPong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentTime uint64 `protobuf:"varint,1,opt,name=current_time,json=currentTime,proto3" json:"current_time,omitempty"` // unix timestamp of the current clock time of the worker
}

func (x *HeartbeatPong) Reset() {
	*x = HeartbeatPong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatPong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatPong) ProtoMessage() {}

func (x *HeartbeatPong) ProtoReflect() protoreflect.Message {
	mi := &file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatPong.ProtoReflect.Descriptor instead.
func (*HeartbeatPong) Descriptor() ([]byte, []int) {
	return file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescGZIP(), []int{4}
}

func (x *HeartbeatPong) GetCurrentTime() uint64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

var File_eigenlayer_hourglass_v1_wire_wire_proto protoreflect.FileDescriptor

var file_eigenlayer_hourglass_v1_wire_wire_proto_rawDesc = []byte{
	0x0a, 0x27, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x68, 0x6f, 0x75,
	0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x2f, 0x77,
	0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x45, 0x0a, 0x1f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x04, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb6, 0x01,
	0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x32, 0x0a, 0x0d, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x98, 0x02, 0x0a, 0x20,
	0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x68,
	0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x77, 0x69, 0x72, 0x65,
	0x42, 0x09, 0x57, 0x69, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x55, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4c, 0x61, 0x79, 0x72, 0x2d, 0x4c,
	0x61, 0x62, 0x73, 0x2f, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2d, 0x6d, 0x6f,
	0x6e, 0x6f, 0x72, 0x65, 0x70, 0x6f, 0x2f, 0x70, 0x6f, 0x6e, 0x6f, 0x73, 0x2f, 0x67, 0x65, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x2f, 0x68, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x69, 0x72, 0x65, 0xa2, 0x02, 0x04, 0x45, 0x48, 0x56, 0x57, 0xaa, 0x02, 0x1c, 0x45, 0x69,
	0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61,
	0x73, 0x73, 0x2e, 0x56, 0x31, 0x2e, 0x57, 0x69, 0x72, 0x65, 0xca, 0x02, 0x1c, 0x45, 0x69, 0x67,
	0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x48, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73,
	0x73, 0x5c, 0x56, 0x31, 0x5c, 0x57, 0x69, 0x72, 0x65, 0xe2, 0x02, 0x28, 0x45, 0x69, 0x67, 0x65,
	0x6e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x48, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73,
	0x5c, 0x56, 0x31, 0x5c, 0x57, 0x69, 0x72, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x45, 0x69, 0x67, 0x65, 0x6e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x3a, 0x3a, 0x48, 0x6f, 0x75, 0x72, 0x67, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x3a, 0x56, 0x31,
	0x3a, 0x3a, 0x57, 0x69, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescOnce sync.Once
	file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescData = file_eigenlayer_hourglass_v1_wire_wire_proto_rawDesc
)

func file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescGZIP() []byte {
	file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescOnce.Do(func() {
		file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescData = protoimpl.X.CompressGZIP(file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescData)
	})
	return file_eigenlayer_hourglass_v1_wire_wire_proto_rawDescData
}

var file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_eigenlayer_hourglass_v1_wire_wire_proto_goTypes = []any{
	(*AuthenticateSocket)(nil), // 0: eigenlayer.hourglass.v1.wire.AuthenticateSocket
	(*Task)(nil),               // 1: eigenlayer.hourglass.v1.wire.Task
	(*TaskResult)(nil),         // 2: eigenlayer.hourglass.v1.wire.TaskResult
	(*HeartbeatPing)(nil),      // 3: eigenlayer.hourglass.v1.wire.HeartbeatPing
	(*HeartbeatPong)(nil),      // 4: eigenlayer.hourglass.v1.wire.HeartbeatPong
}
var file_eigenlayer_hourglass_v1_wire_wire_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_eigenlayer_hourglass_v1_wire_wire_proto_init() }
func file_eigenlayer_hourglass_v1_wire_wire_proto_init() {
	if File_eigenlayer_hourglass_v1_wire_wire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*AuthenticateSocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*HeartbeatPing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*HeartbeatPong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eigenlayer_hourglass_v1_wire_wire_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eigenlayer_hourglass_v1_wire_wire_proto_goTypes,
		DependencyIndexes: file_eigenlayer_hourglass_v1_wire_wire_proto_depIdxs,
		MessageInfos:      file_eigenlayer_hourglass_v1_wire_wire_proto_msgTypes,
	}.Build()
	File_eigenlayer_hourglass_v1_wire_wire_proto = out.File
	file_eigenlayer_hourglass_v1_wire_wire_proto_rawDesc = nil
	file_eigenlayer_hourglass_v1_wire_wire_proto_goTypes = nil
	file_eigenlayer_hourglass_v1_wire_wire_proto_depIdxs = nil
}
