#!/usr/bin/env bash
set -e

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"


# Check if context parameter is provided
if [ -z "$1" ]; then
    log "Error: Missing context parameter"
    log "Usage: ./call '{\"version\":\"0.0.1\",\"context\":{...}}' '{\"signature\":\"(uint256,string,...)\",\"args\":\"(5,\"hello\",...)\"}'"
    exit 1
fi

# Check if params parameter is provided
if [ -z "$2" ]; then
    log "Error: Missing params parameter"
    log "Usage: ./call '{\"version\":\"0.0.1\",\"context\":{...}}' '{\"signature\":\"(uint256,string,...)\",\"args\":\"(5,\"hello\",...)\"}'"
    exit 1
fi

# Parse the JSON context and params
CONTEXT="$1"
PARAMS="$2"

# Check for required tools
ensureJq
ensureYq


if ! command -v cast &> /dev/null; then
    log "Error: cast not found. Please run 'avs create' first."
    exit 1
fi

# Extract signature and args from params JSON
SIGNATURE=$(echo "$PARAMS" | jq -r '.signature')
ARGS=$(echo "$PARAMS" | jq -r '.args')

# Validate signature and args
if [ "$SIGNATURE" == "null" ] || [ -z "$SIGNATURE" ]; then
    log "Error: Missing signature in params"
    log "Params must be in the format: '{\"signature\":\"(uint256,string)\",\"args\":\"(5,\"hello\")\"}'"
    exit 1
fi

if [ "$ARGS" == "null" ] || [ -z "$ARGS" ]; then
    log "Error: Missing args in params"
    log "Params must be in the format: '{\"signature\":\"(uint256,string)\",\"args\":\"(5,\"hello\")\"}'"
    exit 1
fi

# Format the signature to f(<signature>)
FORMATTED_SIGNATURE="f($SIGNATURE)"

# Generate the payload using cast abi-encode
set +e
PAYLOAD=$(cast abi-encode "$FORMATTED_SIGNATURE" "$ARGS" 2> >(tee >&2))
CAST_EXIT_CODE=$?
set -e

if [ $CAST_EXIT_CODE -ne 0 ]; then
    log ""
    log "Error: Failed to encode arguments using cast abi-encode"
    log "Signature: $SIGNATURE"
    log "Arguments: $ARGS"
    exit 1
fi

# Extract required values from context
ENVIRONMENT=$(echo "$CONTEXT" | jq -r '.context.name')
L2_RPC_URL=$(echo "$CONTEXT" | jq -r '.context.chains.l2.rpc_url')
PRIVATE_KEY_APP=$(echo "$CONTEXT" | jq -r '.context.app_private_key')
AVS_ADDRESS=$(echo "$CONTEXT" | jq -r '.context.avs.address')

# Get executor operator set ID from environment YAML file
ENVIRONMENT_YAML_FILE=".hourglass/context/${ENVIRONMENT}.yaml"
if [ ! -f "$ENVIRONMENT_YAML_FILE" ]; then
    log "Error: AVS environment file ${ENVIRONMENT_YAML_FILE} does not exist"
    exit 1
fi

EXECUTOR_OPERATOR_SET_ID=$(yq -r '.executor.operatorSetId' "$ENVIRONMENT_YAML_FILE")

# Validate required fields exist in JSON
if [ "$ENVIRONMENT" == "null" ] || [ -z "$ENVIRONMENT" ]; then
    log "Error: Missing name (environment) in context"
    exit 1
fi

if [ "$L2_RPC_URL" == "null" ] || [ -z "$L2_RPC_URL" ]; then
    log "Error: Missing L2_RPC_URL in context"
    exit 1
fi

if [ "$PRIVATE_KEY_APP" == "null" ] || [ -z "$PRIVATE_KEY_APP" ]; then
    log "Error: Missing app_private_key in context"
    exit 1
fi

if [ "$AVS_ADDRESS" == "null" ] || [ -z "$AVS_ADDRESS" ]; then
    log "Error: Missing avs.address in context"
    exit 1
fi

if [ "$EXECUTOR_OPERATOR_SET_ID" == "null" ] || [ -z "$EXECUTOR_OPERATOR_SET_ID" ]; then
    log "Error: Missing executor.operatorSetId in ${ENVIRONMENT_YAML_FILE}"
    exit 1
fi

# Validate Ethereum addresses
if [[ ! "$AVS_ADDRESS" =~ ^0x[a-fA-F0-9]{40}$ ]]; then
    log "Error: AVS_ADDRESS must be a valid Ethereum address (0x followed by 40 hex characters)"
    exit 1
fi

# Validate payload is a hex string
if [[ ! "$PAYLOAD" =~ ^0x[a-fA-F0-9]+$ ]]; then
    log "Error: Generated payload must be a hex string (0x followed by hex characters)"
    log "Got: $PAYLOAD"
    exit 1
fi

log "Creating task on the TaskMailbox contract..."
log "Using payload encoded from signature: $SIGNATURE, args: $ARGS"

# Create a task on the TaskMailbox contract
cd ./.devkit/contracts && PRIVATE_KEY_APP="${PRIVATE_KEY_APP}" make create-task RPC_URL="${L2_RPC_URL}" ENVIRONMENT="${ENVIRONMENT}" AVS_ADDRESS="${AVS_ADDRESS}" EXECUTOR_OPERATOR_SET_ID=${EXECUTOR_OPERATOR_SET_ID} PAYLOAD="${PAYLOAD}"

log "Task created successfully." 
