#!/usr/bin/env bash
set -e

# source in helper functions
source "$( dirname "${BASH_SOURCE[0]}" )/helpers/helpers.sh"


# Check if context parameter is provided
if [ -z "$1" ]; then
    log "Error: Missing context parameter"
    log "Usage: ./run '{\"version\":\"0.0.1\",\"context\":{...}}'"
    exit 1
fi

# Parse the JSON context
CONTEXT="$1"

# Check for required tools
ensureJq
ensureYq
ensureGomplate

ENVIRONMENT=$(echo "$CONTEXT" | jq -r '.context.name')
if [ "$ENVIRONMENT" == "null" ] || [ -z "$ENVIRONMENT" ]; then
    log "Error: Missing name (environment) in context"
    exit 1
fi
hourglassContextConfigPath="$( dirname "${BASH_SOURCE[0]}" )/../../.hourglass/context/${ENVIRONMENT}.yaml"
contextConfig="$(cat $hourglassContextConfigPath | yq -o json)"

log "Starting AVS components for environment: $ENVIRONMENT"

function readOperatorBlsKeystore() {
    cat $(realpath $1) | jq -r '.'
}

function loadBlsKeysForAllOperators() {
    local operatorCount=$(echo $CONTEXT | jq -r ".context.operators | length")
    for i in $(seq 0 $((operatorCount - 1))); do
        local operatorAddress=$(echo $CONTEXT | jq -r ".context.operators[$i].address")
        local blsKeystorePath=$(echo $CONTEXT | jq -r ".context.operators[$i].bls_keystore_path")
        local blsKeyContents=$(echo $(readOperatorBlsKeystore $blsKeystorePath) | jq -c '.')
        # set the bls key contents in the context as a raw string
        CONTEXT=$(echo $CONTEXT | jq --argjson blsKeyContents "$blsKeyContents" ".context.operators[$i].bls_key_contents = \$blsKeyContents")
    done
}

loadBlsKeysForAllOperators

# construct rpc_urls for environment
L1_RPC_URL=$(echo $CONTEXT | jq -r '.context.chains.l1.rpc_url')
L1_DOCKER_RPC_URL=$(ensureDockerHost "$L1_RPC_URL")
L2_RPC_URL=$(echo $CONTEXT | jq -r '.context.chains.l2.rpc_url')
L2_DOCKER_RPC_URL=$(ensureDockerHost "$L2_RPC_URL")

# return rpc_urls to context
CONTEXT=$(echo $CONTEXT | jq --arg url "$L1_DOCKER_RPC_URL" '.context.chains.l1.rpc_url = $url')
CONTEXT=$(echo $CONTEXT | jq --arg url "$L2_DOCKER_RPC_URL" '.context.chains.l2.rpc_url = $url')

# set aggregator and executor
CONTEXT=$(echo $CONTEXT | jq --argjson contextConfig "$contextConfig" '.aggregator = $contextConfig.aggregator')
CONTEXT=$(echo $CONTEXT | jq --argjson contextConfig "$contextConfig" '.executor = $contextConfig.executor')

deployedContracts=$(echo $CONTEXT | jq -r '.context.deployed_contracts')
if [ "$deployedContracts" == "null" ] || [ -z "$deployedContracts" ]; then
    log "Error: Need to deploy contracts. Please run 'devkit avs devnet start'"
    exit 1
fi

echo $CONTEXT | gomplate -f .hourglass/config/aggregator-template.yaml -d 'ctx=stdin:/?type=application/json' > .hourglass/config/aggregator.yaml
echo $CONTEXT | gomplate -f .hourglass/config/executor-template.yaml -d 'ctx=stdin:/?type=application/json' > .hourglass/config/executor.yaml

# Run the Aggregator and Executor in docker containers
./.hourglass/scripts/run.sh

log "AVS components started successfully." 
